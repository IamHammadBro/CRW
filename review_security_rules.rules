// Firestore Security Rules for Review & Rating System

// Reviews Collection Rules
match /reviews/{reviewId} {
  // Allow read for all authenticated users if review is approved
  allow read: if request.auth != null && 
                 resource.data.moderationStatus == 'approved';
  
  // Allow create for authenticated users on their own reviews
  allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reviewerId &&
                   isValidReview(request.resource.data);
  
  // Allow update only for the review owner (for adding comments/helpful marks)  
  allow update: if request.auth != null && 
                   (request.auth.uid == resource.data.reviewerId ||
                    isOnlyUpdatingInteractions(request.resource.data, resource.data));
  
  // Allow delete only for review owner or admin
  allow delete: if request.auth != null && 
                   (request.auth.uid == resource.data.reviewerId || 
                    isAdmin(request.auth.uid));

  // Validate review data structure
  function isValidReview(reviewData) {
    return reviewData.keys().hasAll(['reviewerId', 'reviewerName', 'targetId', 'type', 'rating', 'createdAt', 'moderationStatus']) &&
           reviewData.rating is number &&
           reviewData.rating >= 1 &&
           reviewData.rating <= 5 &&
           reviewData.type in ['trip', 'package', 'traveler', 'sender'] &&
           reviewData.moderationStatus in ['pending', 'approved', 'rejected', 'flagged'] &&
           reviewData.createdAt is timestamp &&
           (reviewData.comment == null || reviewData.comment is string) &&
           (reviewData.photoUrls == null || reviewData.photoUrls is list) &&
           reviewData.reviewerId is string &&
           reviewData.targetId is string;
  }
  
  // Check if only interaction fields are being updated (helpful, comments)
  function isOnlyUpdatingInteractions(newData, oldData) {
    let allowedUpdates = ['helpfulUserIds', 'helpfulCount', 'comments', 'updatedAt'];
    return newData.diff(oldData).affectedKeys().hasOnly(allowedUpdates);
  }
}

// Review Summaries Collection Rules
match /review_summaries/{targetId} {
  // Allow read for all authenticated users
  allow read: if request.auth != null;
  
  // Only allow system/admin updates to review summaries
  allow write: if false; // Reviews are updated via Cloud Functions
}

// Reports Collection Rules
match /reports/{reportId} {
  // Allow read only for admins
  allow read: if isAdmin(request.auth.uid);
  
  // Allow create for authenticated users
  allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reporterId &&
                   isValidReport(request.resource.data);
  
  // Allow update only for admins (to change status)
  allow update: if isAdmin(request.auth.uid);
  
  // No delete allowed
  allow delete: if false;

  function isValidReport(reportData) {
    return reportData.keys().hasAll(['reviewId', 'reporterId', 'reason', 'reportedAt', 'status']) &&
           reportData.reviewId is string &&
           reportData.reporterId is string &&
           reportData.reason is string &&
           reportData.reportedAt is timestamp &&
           reportData.status in ['pending', 'resolved', 'dismissed'] &&
           (reportData.commentId == null || reportData.commentId is string);
  }
}

// Helper function to check if user is admin
function isAdmin(userId) {
  // In a real app, you would check against an admin collection or custom claims
  return exists(/databases/$(database)/documents/admins/$(userId));
}

// Rate limiting rules
match /user_review_limits/{userId} {
  allow read, write: if request.auth != null && request.auth.uid == userId;
}

// Additional rules for preventing spam and abuse:
// 1. Users can only create 1 review per target (trip/package)
// 2. Users cannot review their own trips/packages
// 3. Reviews can only be created after a booking is completed
match /reviews/{reviewId} {
  // Enhanced create validation
  allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reviewerId &&
                   isValidReview(request.resource.data) &&
                   !hasExistingReview(request.auth.uid, request.resource.data.targetId) &&
                   !isReviewingOwnContent(request.auth.uid, request.resource.data.targetId, request.resource.data.type);

  // Check if user already has a review for this target
  function hasExistingReview(userId, targetId) {
    return exists(/databases/$(database)/documents/reviews/$(userId + '_' + targetId));
  }
  
  // Prevent users from reviewing their own trips/packages
  function isReviewingOwnContent(userId, targetId, type) {
    return (type == 'trip' && 
            exists(/databases/$(database)/documents/trips/$(targetId)) &&
            get(/databases/$(database)/documents/trips/$(targetId)).data.travelerId == userId) ||
           (type == 'package' && 
            exists(/databases/$(database)/documents/packages/$(targetId)) &&
            get(/databases/$(database)/documents/packages/$(targetId)).data.senderId == userId);
  }
}
